[
  {
    "objectID": "index.html",
    "href": "index.html",
    "title": "mypackage",
    "section": "",
    "text": "test build 1"
  },
  {
    "objectID": "src/mdhlp/ad_setup.html",
    "href": "src/mdhlp/ad_setup.html",
    "title": "mypackage",
    "section": "",
    "text": "Syntax\nad_setup , adfolder(string) [ name(string) description(string) author(string) contact(string) url(string) autoconfirm\n\n\n\n\n\n\n\noptions\nDescription\n\n\n\n\nadfolder(string)\nLocation where package folder will be created\n\n\nname(string)\nName of package\n\n\ndescription(string)\nDescription of package\n\n\nauthor(string)\nAuthor or authors\n\n\ncontact(string)\nContact information\n\n\nurl(string)\nURl (for example to repo hosting the package)\n\n\nautoconfirm\nSuppress the prompt asking user to confirm package creation\n\n\n\n\n\nDescription\nThis command creates the initial folder template needed to write and document Stata command packages in the adodown workflow.\nThis workflow makes it easier to create Stata command and packages both ready for distribution on SSC and from a GitHub repository. This workflow also makes writing both web-documentation and helpfiles easier. The helpfiles are written in markdown files that are then used both to render Stata helpfile in .sthlp-format and to render web documentation that can, for example, be hosted in a GitHub Page.\n\n\nOptions\nadfolder(string) is used to indicate the location where package folder will be created. This folder can for example be a newly created GitHub repository cloned to the local computer.\nname(string) specifies the name of the package that will be created. This is the name that would then be used in ssc install <name> or net install <name>. A command with the same name will be created and added to the package. While this option is optional, this package meta data is required. So if this option is not used, the user will be prompted to enter the name interactively.\ndescription(string) specifies the description of the package. This is the description paragraph that will displayed when using ssc describe <name> or net describe <name>. While this option is optional, this package meta data is required. So if this option is not used, the user will be prompted to enter the name interactively.\nauthor(string) specifies the name of the author or authors of this package. This information will be included when using ssc describe <name> or net describe <name>. While this option is optional, this package meta data is required. So if this option is not used, the user will be prompted to enter the name interactively.\ncontact(string) specifies the contact information where a users of this package can ask for support. This information will be included when using ssc describe <name> or net describe <name>. While this option is optional, this package meta data is required. So if this option is not used, the user will be prompted to enter the name interactively.\nurl(string) specifies a website for where this code is hosted. This should not be where the web-documentation generated in the adodown is hosted, but where the source code is hosted. The web-documentation will include a link pointing to the URL. If using GitHub, then the intended URL should be on this format: https://github.com/lsms-worldbank/adodown. This information will be included when using ssc describe <name> or net describe <name>. While this option is optional, this package meta data is required. So if this option is not used, the user will be prompted to enter the name interactively.\n\n\nExamples\nThis example creates a package folder for a package named my_package in the location that the local myfolder points to.\n* point a local to the folder where the package will be created\nlocal myfolder \"path/to/folder\"\n\n* Package meta info\nlocal pkg \"my_package\"\nlocal aut \"John Doe\"\nlocal des \"This packages does amazing thing A, B and C.\"\nlocal url \"https://github.com/lsms-worldbank/adodown\"\nlocal con \"jdoe@worldbank.org\"\n\n* Set up adodown-styled package folder\nad_setup, adfolder(\"`myfolder'\") autoconfirm    ///\n     name(\"`pkg'\") author(\"`aut'\") desc(\"`des'\") ///\n     url(\"`url'\") contact(\"`con'\")\n\n\nFeedback, bug reports and contributions\nPlease use the issues feature on the GitHub repository for the adodown package to communicate any feedback, report bugs, or to make feature requests.\n\n\nAuthors\n\nAuthor: John Doe\nSupport: jdoe@worldbank.org"
  },
  {
    "objectID": "src/mdhlp/ad_sthlp.html",
    "href": "src/mdhlp/ad_sthlp.html",
    "title": "mypackage",
    "section": "",
    "text": "Syntax\nad_sthlp , adfolder(string)\n\n\n\n\n\n\n\noptions\nDescription\n\n\n\n\nadfolder(string)\nLocation where package folder already exists\n\n\n\n\n\nDescription\nThis command renders Stata helpfiles in the .sthlp format written in the mdhlp-files written in markdown. The sthlp-files are then intended to be included instead of the mdhlp-files when distributing the command using either either ssc install or net install.\nIn the adodown workflow the mdhlp-files are expected to be stored in a folder mdhlp in the folder that adfolder(string) points to, and the sthlp-files are expted to be written to a folder sthlp in the same location. If the package folder was set up using ad_setup and the commands were added to the package folder using ad_command, then this is already the case.\n\n\nOptions\nadfolder(string) is used to indicate the location of where the adodown-styled package folder already exist.\n\n\nExamples\nExample 1\nThis example assumes that there is already a adodown-styled package folder at the location the local myfolder is pointing to, and that some commands have already been created. Any mdhlp-files in the mdhlp folder in the folder myfolder is pointing to will be rendered to Stata helpfile format and saved in the sthlp folder.\n* point a local to the folder where the package will be created\nlocal myfolder \"path/to/folder\"\n\n* Render the Stata helpfiles\nad_sthlp, adf(\"`myfolder'\")\nExample 2\nThis example includes the steps for how to create the adodown-styled package folder in the location the local myfolder is pointing to, creating some commands and then render the template mdhlp-files to Stata helpfiles.\n* point a local to the folder where the package will be created\nlocal myfolder \"path/to/folder\"\n\n* Package meta info\nlocal pkg \"my_package\"\nlocal aut \"John Doe\"\nlocal des \"This packages does amazing thing A, B and C.\"\nlocal url \"https://github.com/lsms-worldbank/adodown\"\nlocal con \"jdoe@worldbank.org\"\n\n* Set up adodown-styled package folder\nad_setup, adfolder(\"`myfolder'\") autoconfirm    ///\n     name(\"`pkg'\") author(\"`aut'\") desc(\"`des'\") ///\n     url(\"`url'\") contact(\"`con'\")\n\n* Add command mycmd to the package folder\nad_command create mycmd1, adf(\"`myfolder'\") pkg(\"`pkg'\")\nad_command create mycmd2, adf(\"`myfolder'\") pkg(\"`pkg'\")\n\n* Render the Stata helpfiles\nad_sthlp, adf(\"`myfolder'\")\n\n\nFeedback, bug reports and contributions\nPlease use the issues feature on the GitHub repository for the adodown package to communicate any feedback, report bugs, or to make feature requests.\n\n\nAuthors\n\nAuthor: John Doe\nSupport: jdoe@worldbank.org"
  },
  {
    "objectID": "src/mdhlp/ad_command.html",
    "href": "src/mdhlp/ad_command.html",
    "title": "mypackage",
    "section": "",
    "text": "Syntax\nad_command subcommand commandname , adfolder(string) pkgname(string)\nwhere subcommand is either create or remove and commandname is the name of the new command to create or the existing command to remove.\n\n\n\n\n\n\n\noptions\nDescription\n\n\n\n\nadfolder(string)\nLocation where package folder already exists\n\n\npkgname(string)\nName of package that exists in the location adfolder() points to.\n\n\n\n\n\nDescription\nThis command is only intended to be used in package folders set up in the adodown workflow using the command ad_setup.\nThis command creates new commands in the package or removes existing commands from it. When creating a command, a template for the ado-file is created in the ado folder, a template for the mdhlp-file is created in the mdhlp folder, and the ado-file and the sthlp file is addended to the pkg-file in that package folder.\nNote that the using net install will not work immediately after creating a command with this file as the pkg-file points to the sthlp-file that is not yet rendered. Use the command ad_sthlp to render that command.\n\n\nOptions\nsubcommand as specified in ad_command <subcommand> <commandname> can either be create or remove. create is used when creating a new command and remove when removing and existing command.\ncommandname as specified in ad_command <subcommand> <commandname> is the name of the command to be created or removed. If a command is created then an error is thrown if the name is already used by an existing command, and an error will be thrown when removing a command if the name is not used by any existing commands.\nadfolder(string) is used to indicate the location of where the adodown-styled package folder already exist.\npkgname(string) is the name of the package expected to be found in the adfolder().\n\n\nExamples\nExample 1\nThis example assumes that there is already a adodown-styled package folder at the location the local myfolder is pointing to.\n* point a local to the folder where the package will be created\nlocal myfolder \"path/to/folder\"\n\n* Package meta info\nlocal pkg \"my_package\"\n\n* Add command mycmd to the package folder\nad_command create mycmd, adf(\"`myfolder'\") pkg(\"`pkg'\")\nExample 2\nThis example includes the steps for how to create the adodown-styled package folder in the location the local myfolder is pointing to.\n* point a local to the folder where the package will be created\nlocal myfolder \"path/to/folder\"\n\n* Package meta info\nlocal pkg \"my_package\"\nlocal aut \"John Doe\"\nlocal des \"This packages does amazing thing A, B and C.\"\nlocal url \"https://github.com/lsms-worldbank/adodown\"\nlocal con \"jdoe@worldbank.org\"\n\n* Set up adodown-styled package folder\nad_setup, adfolder(\"`myfolder'\") autoconfirm    ///\n     name(\"`pkg'\") author(\"`aut'\") desc(\"`des'\") ///\n     url(\"`url'\") contact(\"`con'\")\n\n* Add command mycmd to the package folder\nad_command create mycmd, adf(\"`myfolder'\") pkg(\"`pkg'\")\n\n\nFeedback, bug reports and contributions\nPlease use the issues feature on the GitHub repository for the adodown package to communicate any feedback, report bugs, or to make feature requests.\n\n\nAuthors\n\nAuthor: John Doe\nSupport: jdoe@worldbank.org"
  },
  {
    "objectID": "src/ado/templates/ad-vignettes-README.html",
    "href": "src/ado/templates/ad-vignettes-README.html",
    "title": "mypackage",
    "section": "",
    "text": "In this folder you can put article styled documentation. What do we mean by that? These article styled vignettes is supposed to be a complement to the command documentation written in the mdhlp-files which are later rendered into sthlp-files.\nThe command documentation are technical descriptions on how to run a command, what the options are, how they are specified, and what the expected outcome is. Article styled documentation compliments that by being a long-form guide that can be more narrative than technical.\nFor example, a vignette can be about the initial motivation behind a command, it can be about how multiple commands in the package can work together, or anything else the authors of a package wants to communicate to the users."
  },
  {
    "objectID": "src/ado/templates/ad-tests-README.html",
    "href": "src/ado/templates/ad-tests-README.html",
    "title": "mypackage",
    "section": "",
    "text": "In this folder"
  },
  {
    "objectID": "src/ado/templates/ad-mdhlp-command.html",
    "href": "src/ado/templates/ad-mdhlp-command.html",
    "title": "mypackage",
    "section": "",
    "text": "Syntax\nADCOMMANDNAME , option1(string)\n\n\n\noptions\nDescription\n\n\n\n\noption1(string)\nShort description of option1\n\n\n\n\n\nDescription\n\n\n\nOptions\n\noption1(string) is used for xyz. Longer description (paragraph length) of all options, their intended use case and best practices related to them.\n\n\nExamples\n\n\n\nFeedback, bug reports and contributions\n\n\n\nAuthors\nTODO: Populate this field from .pkg file"
  },
  {
    "objectID": "src/ado/templates/ad-sthlp-README.html",
    "href": "src/ado/templates/ad-sthlp-README.html",
    "title": "mypackage",
    "section": "",
    "text": "In the adodown workflow you should not edit these files directly. They should be edited in the markdown files in the folder mdhlp. The files in this folder should be rendered by the command adrendersthlp."
  },
  {
    "objectID": "src/ado/templates/ad-mdhlp-README.html",
    "href": "src/ado/templates/ad-mdhlp-README.html",
    "title": "mypackage",
    "section": "",
    "text": "In the adodown workflow you should not create any of the files in this folder using the command adnewcommand. The markdown files here are then rendered into Stata help files saved in the folder stlhp. The content in this folder is also used to render a documentation website using the R-tool adodown.\nFor syntax rules on how to write Stata helpfiles in markdown in the adodown workflow, see this article (link to adodown vignette)."
  },
  {
    "objectID": "src/ado/templates/ad-ado-README.html",
    "href": "src/ado/templates/ad-ado-README.html",
    "title": "mypackage",
    "section": "",
    "text": "In the adodown workflow you should not create any of the ado-files in this folder manually. Instead you are intended to use the command adnewcommand.\nTODO: How to create auxiliary files?\n* Here is a codebox with some terrible code examples\nmy local `\"String\"'"
  },
  {
    "objectID": "src/tests/test-ad_setup.html",
    "href": "src/tests/test-ad_setup.html",
    "title": "mypackage",
    "section": "",
    "text": "The only thing needed to run the test is to open file adodown\\tests\\ad_setup.do and edit the root path at the top of the folder to point to the clone in your file system.\n* AS root path\nif c(username) == \"<computer username>\" {\n    local clone \"<clone file path>\"\n}\nTest 1 shows how the command can run with no manual input. All package meta information is in the command options. In test 2 no package meta information is passed as options. Instead, the command will prompt the user to enter it manually. You can mix passing meta info in options and provide manually.\nSee outputs of tests here: adodown\\tests\\outputs\\ad_setup\n\n\n\nThe command has 4 stages\n\nTest package meta info passed in options\nPrompt user for package meta info that was not passed in info\nPrepare and test the folder template creation:\n\nTest that folders can be created\nGet templates from repo\n\nOnce testing is successful, prompt user to confirm (unless option autoconfirm is used)\nThen create the templates\n\nPopulate pkg file and toc file with package meta info\nOnly now create all the folder and files\n\n\nThe command sets up folders and use templates stored here: adodown\\ado\\templates.\n\nCurrently the command downloads the templates from the repo over https. That is ok and should remain one option. I think there should be an offline option. I have ideas for that. Stata’s ancillary files was not the best fit for this.\n\nThe command populates the pkg file such that it can be updated by future commands used when a user wants to create a new command."
  },
  {
    "objectID": "src/vignettes/adodown-workflow.html",
    "href": "src/vignettes/adodown-workflow.html",
    "title": "mypackage",
    "section": "",
    "text": "The adodown workflow is intended to make it easier to set up and maintain Stata packages. Such that, more time can be spend writing code instead of modifying pkg-files etc.\nThe adodown workflow also allows you to write documentation in markdown format, which is a format that is quicker to learn that Stata’s smcl. This mean that you do not have access to all the features in smcl, but you can still write great documentation with the features you still have access to.\nAnother, and perhaps greater, advantage of writing the documentation in markdown files is that those files can automatically be rendered into web-based documentation. The part of adodown that renders the web-based documentation is written in R and uses Quarto. However, if you are hosting your adodown-styled Stata package on GitHub.com, then you do not need to know R or Quarto, as rendering the web-based documentation can be automated with GitHub actions.\nTEST UPDATE"
  },
  {
    "objectID": "articles/adodown-workflow.html",
    "href": "articles/adodown-workflow.html",
    "title": "adodown-workflow.md",
    "section": "",
    "text": "The adodown workflow is intended to make it easier to set up and maintain Stata packages. Such that, more time can be spend writing code instead of modifying pkg-files etc.\nThe adodown workflow also allows you to write documentation in markdown format, which is a format that is quicker to learn that Stata’s smcl. This mean that you do not have access to all the features in smcl, but you can still write great documentation with the features you still have access to.\nAnother, and perhaps greater, advantage of writing the documentation in markdown files is that those files can automatically be rendered into web-based documentation. The part of adodown that renders the web-based documentation is written in R and uses Quarto. However, if you are hosting your adodown-styled Stata package on GitHub.com, then you do not need to know R or Quarto, as rendering the web-based documentation can be automated with GitHub actions.\nTEST UPDATE"
  },
  {
    "objectID": "reference/ad_setup.html",
    "href": "reference/ad_setup.html",
    "title": "ad_setup.md",
    "section": "",
    "text": "Syntax\nad_setup , adfolder(string) [ name(string) description(string) author(string) contact(string) url(string) autoconfirm\n\n\n\n\n\n\n\noptions\nDescription\n\n\n\n\nadfolder(string)\nLocation where package folder will be created\n\n\nname(string)\nName of package\n\n\ndescription(string)\nDescription of package\n\n\nauthor(string)\nAuthor or authors\n\n\ncontact(string)\nContact information\n\n\nurl(string)\nURl (for example to repo hosting the package)\n\n\nautoconfirm\nSuppress the prompt asking user to confirm package creation\n\n\n\n\n\nDescription\nThis command creates the initial folder template needed to write and document Stata command packages in the adodown workflow.\nThis workflow makes it easier to create Stata command and packages both ready for distribution on SSC and from a GitHub repository. This workflow also makes writing both web-documentation and helpfiles easier. The helpfiles are written in markdown files that are then used both to render Stata helpfile in .sthlp-format and to render web documentation that can, for example, be hosted in a GitHub Page.\n\n\nOptions\nadfolder(string) is used to indicate the location where package folder will be created. This folder can for example be a newly created GitHub repository cloned to the local computer.\nname(string) specifies the name of the package that will be created. This is the name that would then be used in ssc install <name> or net install <name>. A command with the same name will be created and added to the package. While this option is optional, this package meta data is required. So if this option is not used, the user will be prompted to enter the name interactively.\ndescription(string) specifies the description of the package. This is the description paragraph that will displayed when using ssc describe <name> or net describe <name>. While this option is optional, this package meta data is required. So if this option is not used, the user will be prompted to enter the name interactively.\nauthor(string) specifies the name of the author or authors of this package. This information will be included when using ssc describe <name> or net describe <name>. While this option is optional, this package meta data is required. So if this option is not used, the user will be prompted to enter the name interactively.\ncontact(string) specifies the contact information where a users of this package can ask for support. This information will be included when using ssc describe <name> or net describe <name>. While this option is optional, this package meta data is required. So if this option is not used, the user will be prompted to enter the name interactively.\nurl(string) specifies a website for where this code is hosted. This should not be where the web-documentation generated in the adodown is hosted, but where the source code is hosted. The web-documentation will include a link pointing to the URL. If using GitHub, then the intended URL should be on this format: https://github.com/lsms-worldbank/adodown. This information will be included when using ssc describe <name> or net describe <name>. While this option is optional, this package meta data is required. So if this option is not used, the user will be prompted to enter the name interactively.\n\n\nExamples\nThis example creates a package folder for a package named my_package in the location that the local myfolder points to.\n* point a local to the folder where the package will be created\nlocal myfolder \"path/to/folder\"\n\n* Package meta info\nlocal pkg \"my_package\"\nlocal aut \"John Doe\"\nlocal des \"This packages does amazing thing A, B and C.\"\nlocal url \"https://github.com/lsms-worldbank/adodown\"\nlocal con \"jdoe@worldbank.org\"\n\n* Set up adodown-styled package folder\nad_setup, adfolder(\"`myfolder'\") autoconfirm    ///\n     name(\"`pkg'\") author(\"`aut'\") desc(\"`des'\") ///\n     url(\"`url'\") contact(\"`con'\")\n\n\nFeedback, bug reports and contributions\nPlease use the issues feature on the GitHub repository for the adodown package to communicate any feedback, report bugs, or to make feature requests.\n\n\nAuthors\n\nAuthor: John Doe\nSupport: jdoe@worldbank.org"
  },
  {
    "objectID": "reference/index.html",
    "href": "reference/index.html",
    "title": "Function reference",
    "section": "",
    "text": "Functions\nDescription\n\n\n\n\nad_command\nCreates or removes commands in the adodown workflow.\n\n\nad_setup\nSets up the initial package folder in the adodown workflow. Kristoffer\n\n\nad_sthlp\nRenders sthlp-files from mdhlp-files in the adodown workflow."
  },
  {
    "objectID": "reference/ad_command.html",
    "href": "reference/ad_command.html",
    "title": "ad_command.md",
    "section": "",
    "text": "Syntax\nad_command subcommand commandname , adfolder(string) pkgname(string)\nwhere subcommand is either create or remove and commandname is the name of the new command to create or the existing command to remove.\n\n\n\n\n\n\n\noptions\nDescription\n\n\n\n\nadfolder(string)\nLocation where package folder already exists\n\n\npkgname(string)\nName of package that exists in the location adfolder() points to.\n\n\n\n\n\nDescription\nThis command is only intended to be used in package folders set up in the adodown workflow using the command ad_setup.\nThis command creates new commands in the package or removes existing commands from it. When creating a command, a template for the ado-file is created in the ado folder, a template for the mdhlp-file is created in the mdhlp folder, and the ado-file and the sthlp file is addended to the pkg-file in that package folder.\nNote that the using net install will not work immediately after creating a command with this file as the pkg-file points to the sthlp-file that is not yet rendered. Use the command ad_sthlp to render that command.\n\n\nOptions\nsubcommand as specified in ad_command <subcommand> <commandname> can either be create or remove. create is used when creating a new command and remove when removing and existing command.\ncommandname as specified in ad_command <subcommand> <commandname> is the name of the command to be created or removed. If a command is created then an error is thrown if the name is already used by an existing command, and an error will be thrown when removing a command if the name is not used by any existing commands.\nadfolder(string) is used to indicate the location of where the adodown-styled package folder already exist.\npkgname(string) is the name of the package expected to be found in the adfolder().\n\n\nExamples\nExample 1\nThis example assumes that there is already a adodown-styled package folder at the location the local myfolder is pointing to.\n* point a local to the folder where the package will be created\nlocal myfolder \"path/to/folder\"\n\n* Package meta info\nlocal pkg \"my_package\"\n\n* Add command mycmd to the package folder\nad_command create mycmd, adf(\"`myfolder'\") pkg(\"`pkg'\")\nExample 2\nThis example includes the steps for how to create the adodown-styled package folder in the location the local myfolder is pointing to.\n* point a local to the folder where the package will be created\nlocal myfolder \"path/to/folder\"\n\n* Package meta info\nlocal pkg \"my_package\"\nlocal aut \"John Doe\"\nlocal des \"This packages does amazing thing A, B and C.\"\nlocal url \"https://github.com/lsms-worldbank/adodown\"\nlocal con \"jdoe@worldbank.org\"\n\n* Set up adodown-styled package folder\nad_setup, adfolder(\"`myfolder'\") autoconfirm    ///\n     name(\"`pkg'\") author(\"`aut'\") desc(\"`des'\") ///\n     url(\"`url'\") contact(\"`con'\")\n\n* Add command mycmd to the package folder\nad_command create mycmd, adf(\"`myfolder'\") pkg(\"`pkg'\")\n\n\nFeedback, bug reports and contributions\nPlease use the issues feature on the GitHub repository for the adodown package to communicate any feedback, report bugs, or to make feature requests.\n\n\nAuthors\n\nAuthor: John Doe\nSupport: jdoe@worldbank.org"
  },
  {
    "objectID": "reference/ad_sthlp.html",
    "href": "reference/ad_sthlp.html",
    "title": "ad_sthlp.md",
    "section": "",
    "text": "Syntax\nad_sthlp , adfolder(string)\n\n\n\n\n\n\n\noptions\nDescription\n\n\n\n\nadfolder(string)\nLocation where package folder already exists\n\n\n\n\n\nDescription\nThis command renders Stata helpfiles in the .sthlp format written in the mdhlp-files written in markdown. The sthlp-files are then intended to be included instead of the mdhlp-files when distributing the command using either either ssc install or net install.\nIn the adodown workflow the mdhlp-files are expected to be stored in a folder mdhlp in the folder that adfolder(string) points to, and the sthlp-files are expted to be written to a folder sthlp in the same location. If the package folder was set up using ad_setup and the commands were added to the package folder using ad_command, then this is already the case.\n\n\nOptions\nadfolder(string) is used to indicate the location of where the adodown-styled package folder already exist.\n\n\nExamples\nExample 1\nThis example assumes that there is already a adodown-styled package folder at the location the local myfolder is pointing to, and that some commands have already been created. Any mdhlp-files in the mdhlp folder in the folder myfolder is pointing to will be rendered to Stata helpfile format and saved in the sthlp folder.\n* point a local to the folder where the package will be created\nlocal myfolder \"path/to/folder\"\n\n* Render the Stata helpfiles\nad_sthlp, adf(\"`myfolder'\")\nExample 2\nThis example includes the steps for how to create the adodown-styled package folder in the location the local myfolder is pointing to, creating some commands and then render the template mdhlp-files to Stata helpfiles.\n* point a local to the folder where the package will be created\nlocal myfolder \"path/to/folder\"\n\n* Package meta info\nlocal pkg \"my_package\"\nlocal aut \"John Doe\"\nlocal des \"This packages does amazing thing A, B and C.\"\nlocal url \"https://github.com/lsms-worldbank/adodown\"\nlocal con \"jdoe@worldbank.org\"\n\n* Set up adodown-styled package folder\nad_setup, adfolder(\"`myfolder'\") autoconfirm    ///\n     name(\"`pkg'\") author(\"`aut'\") desc(\"`des'\") ///\n     url(\"`url'\") contact(\"`con'\")\n\n* Add command mycmd to the package folder\nad_command create mycmd1, adf(\"`myfolder'\") pkg(\"`pkg'\")\nad_command create mycmd2, adf(\"`myfolder'\") pkg(\"`pkg'\")\n\n* Render the Stata helpfiles\nad_sthlp, adf(\"`myfolder'\")\n\n\nFeedback, bug reports and contributions\nPlease use the issues feature on the GitHub repository for the adodown package to communicate any feedback, report bugs, or to make feature requests.\n\n\nAuthors\n\nAuthor: John Doe\nSupport: jdoe@worldbank.org"
  }
]